apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  namespace: tekton
spec:
  description: >-
    This Task builds a nexus artifact to the image and pushes it to the image registry.

  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: pathToDockerFile
      description: Path of the Docker file existed.
      default: ./Dockerfile
    - name: pathToContext
      description: Path of contexts existed.
      default: ./
    - name: IMAGE_TAG
      description: The image tag
      default: latest
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v0.16.0
  workspaces:
    - name: kaniko-conf
      description: Includes a docker `config.json`
      mountPath: /kaniko/conf
    - name: wget-workspace
  results:
    - name: IMAGE_DIGEST
    - name: IMAGE_URL
  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      workingDir: /kaniko/conf
      args:
        - --dockerfile=$(params.pathToDockerFile)
          #- --context=$(params.pathToContext)
        - --context=$(workspaces.wget-workspace.path)
        - --destination=$(params.IMAGE)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
    - name: write-url
      image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
      script: |
        set -e
        image="$(params.IMAGE):$(params.IMAGE_TAG)"
        echo -n "${image}" | tee $(results.IMAGE_URL.path)
